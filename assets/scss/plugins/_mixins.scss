@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "../variables";

/*
 *
 * Mixins
 *
 */

// Media Queries
@mixin breakpoint( $breakpoint ) {
	@if map.has-key( variables.$breakpoints, $breakpoint) {
		@media ( min-width: #{ map.get( variables.$breakpoints, $breakpoint ) }) {
			@content;
		}
	}
	@else if meta.type_of( $breakpoint)==number and math.unit( $breakpoint)==px or math.unit( $breakpoint)==em or math.unit( $breakpoint)==rem {
		@media (min-width: $breakpoint) {
			@content;
		}
	}
	@else {
		@warn "Unfortunately no value could be retrieved from `#{$breakpoint}`. "+"Please make sure it is defined in `$breakpoints` map, or it is a valid number with supported unit of px, em or rem.";
	}
}

// Boders
@mixin borderB( $width: 1px, $style: solid, $color: currentColor ) {
	border: $width $style $color;
}

@mixin borderBT( $width: 1px, $style: solid, $color: currentColor ) {
	border-top: $width $style $color;
}

@mixin borderBR( $width: 1px, $style: solid, $color: currentColor ) {
	border-right: $width $style $color;
}

@mixin borderBB( $width: 1px, $style: solid, $color: currentColor ) {
	border-bottom: $width $style $color;
}

@mixin borderBL( $width: 1px, $style: solid, $color: currentColor ) {
	border-left: $width $style $color;
}

// Clearfix
@mixin clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Wrap
@mixin wrap() {
	@include breakpoint( md ) {
		margin-left: auto;
		margin-right: auto;
		max-width: variables.$grid-max-width-md;
		width: 100%;
	}
	@include breakpoint( lg ){
		max-width: variables.$grid-max-width-lg;
	}
	@include breakpoint( xl ){
		max-width: variables.$grid-max-width-xl;
	}
	@include breakpoint( 2xl ){
		max-width: variables.$grid-max-width-2xl;
	}
	@include breakpoint( 3xl ){
		max-width: variables.$grid-max-width-3xl;
	}
}

// Narrow
@mixin narrow() {
	@include breakpoint( variables.$responsive-menu-break ){
		margin-left: auto;
		margin-right: auto;
		width: calc(variables.$gutter * 45);
	}
}

// Narrow with out margin
@mixin narrow-without-margins() {
	@include breakpoint( md ){
		max-width: calc(variables.$gutter * 45);
	}
	@include breakpoint( variables.$responsive-menu-break ){
		max-width: calc(variables.$gutter * 60);
	}
}

// List unstyled.
@mixin list-unstyled() {
	margin-left: 0;
	padding-left: 0;
	li {
		list-style: none;
	}
}

// List inline.
@mixin list-inline() {
	margin: 0;
	padding: 0;
	li {
		display: inline-block;
		list-style: none;
		+ li {
			margin-left: calc(variables.$gutter / 2);
		}
	}
}

// Don't show.
%dontshow {
	position: absolute !important;
	top: -9999rem;
	left: auto;
	width: 1px;
	height: 1px;
	overflow: hidden;
}

// Table.
%table {
	border-collapse: collapse;
	border-spacing: 0;
	empty-cells: show;
	margin-bottom: variables.$magic-number;
	margin-top: variables.$magic-number;
	width: 100%;
	td,
	th {
		padding: calc(variables.$magic-number / 4) variables.$gutter;
		@include borderB( $color: var(--wp--preset--color--gray-light) );
	}
	th {
		background-color: var(--wp--preset--color--gray-dark);
		color: var(--wp--preset--color--white);
		font-weight: var(--wp--custom--typography--font-weight--bold);
		text-align: left;
	}
}
